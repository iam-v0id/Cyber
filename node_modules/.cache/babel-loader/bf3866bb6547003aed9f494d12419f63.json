{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iam-v0id\\\\OneDrive\\\\Documents\\\\CODE\\\\BZ\\\\Cyber\\\\src\\\\context\\\\auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext } from 'react';\nimport JwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('JwtToken')) {\n  const decodedtoken = JwtDecode(localStorage.getItem('JwtToken'));\n\n  if (decodedtoken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('JwtToken');\n  } else {\n    initialState.user = decodedtoken;\n  }\n}\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: data => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem('JwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem('JwtToken');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      login,\n      logout\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/iam-v0id/OneDrive/Documents/CODE/BZ/Cyber/src/context/auth.js"],"names":["React","useReducer","createContext","JwtDecode","initialState","user","localStorage","getItem","decodedtoken","exp","Date","now","removeItem","AuthContext","login","data","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","userData","setItem","token"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,aAAzB,QAA6C,OAA7C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AACA,MAAMC,YAAY,GAAC;AACfC,EAAAA,IAAI,EAAC;AADU,CAAnB;;AAIA,IAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,EAAoC;AAChC,QAAMC,YAAY,GAAGL,SAAS,CAACG,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA9B;;AACA,MAAGC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA7B,EAAwC;AACpCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD,MAGI;AACAR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACH;AACJ;;AACD,MAAMK,WAAW,gBAAGX,aAAa,CAAC;AAC9BG,EAAAA,IAAI,EAAE,IADwB;AAE9BS,EAAAA,KAAK,EAAEC,IAAD,IAAS,CAAE,CAFa;AAG9BC,EAAAA,MAAM,EAAC,MAAI,CAAE;AAHiB,CAAD,CAAjC;;AAOA,SAASC,WAAT,CAAqBC,KAArB,EAA2BC,MAA3B,EAAkC;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFb,QAAAA,IAAI,EAAEc,MAAM,CAACE;AAFX,OAAN;;AAIJ,SAAK,QAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFb,QAAAA,IAAI,EAAE;AAFJ,OAAN;;AAIJ;AAAS,aAAOa,KAAP;AAXb;AAaH;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACxB,QAAM,CAACL,KAAD,EAAOM,QAAP,IAAmBvB,UAAU,CAACgB,WAAD,EAAab,YAAb,CAAnC;;AACA,WAASU,KAAT,CAAeW,QAAf,EAAwB;AACnBnB,IAAAA,YAAY,CAACoB,OAAb,CAAqB,UAArB,EAAgCD,QAAQ,CAACE,KAAzC;AACGH,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,OAAO,EAAEI;AAFJ,KAAD,CAAR;AAIP;;AACD,WAAST,MAAT,GAAiB;AACbV,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAY,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH;;AACD,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAACf,MAAAA,IAAI,EAACa,KAAK,CAACb,IAAZ;AAAiBS,MAAAA,KAAjB;AAAuBE,MAAAA;AAAvB,KADX;AAAA,OAEQO;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GArBQD,Y;;KAAAA,Y;AAuBT,SAAQT,WAAR,EAAoBS,YAApB","sourcesContent":["import React,{useReducer,createContext} from 'react'\r\nimport JwtDecode from 'jwt-decode'\r\nconst initialState={\r\n    user:null\r\n}\r\n\r\nif(localStorage.getItem('JwtToken')){\r\n    const decodedtoken = JwtDecode(localStorage.getItem('JwtToken'))\r\n    if(decodedtoken.exp * 1000 < Date.now()){\r\n        localStorage.removeItem('JwtToken')\r\n    }\r\n    else{\r\n        initialState.user = decodedtoken\r\n    }\r\n}\r\nconst AuthContext = createContext({\r\n    user: null,\r\n    login:(data)=> {},\r\n    logout:()=>{}\r\n})\r\n\r\n\r\nfunction authReducer(state,action){\r\n    switch(action.type){\r\n        case 'LOGIN':\r\n            return{\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case 'LOGOUT':\r\n            return{\r\n                ...state,\r\n                user: null\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props){\r\n    const [state,dispatch] = useReducer(authReducer,initialState)\r\n    function login(userData){\r\n         localStorage.setItem('JwtToken',userData.token)\r\n            dispatch({\r\n                type: 'LOGIN',\r\n                payload: userData\r\n            })\r\n    }\r\n    function logout(){\r\n        localStorage.removeItem('JwtToken')\r\n        dispatch({\r\n            type: 'LOGOUT',\r\n        })\r\n    }\r\n    return(\r\n        <AuthContext.Provider\r\n            value={{user:state.user,login,logout}}\r\n            {...props}\r\n            />\r\n    )\r\n}\r\n\r\nexport {AuthContext,AuthProvider}"]},"metadata":{},"sourceType":"module"}